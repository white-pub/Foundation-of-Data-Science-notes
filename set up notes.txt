Download python from their website, install it.
    used the standard installation “Install Now” and checked the boxes for “Add Python to PATH…”, and “Install as administrator…”

Go to cmd:
    pip install virtualenv



=>Create a New Repository on GitHub
=>Clone the Repository Using GitHub Desktop
        stored the project on your local machine under 

        C:\Users\...Github\folder_name

        (chose your own path, for example, could be under documents)

=>Navigate to the directory where the repository was cloned
        cd path_name
=>Create a Virtual Environment named venv
        python -m venv venv
=>Activate the virtual environment (on Windows)
    🎀-----------------------🎀
        venv\Scripts\activate
    🎀-----------------------🎀
        should see the (venv) in cmd

=> Stay in the virtual environment, start installing needed packages


🍧Option 1:use requirement.txt

    ----
    pip install -r requirements.txt
    ----
    This command installs all the packages listed in the requirements.txt file with the specified versions.

🍧Option 2: install packages manually through pip

Jupyter lab 

    pip install jupyterlab

Pandas
(For data processing, this will automatically include numpy)
    
    pip install pandas

Matplotlib and Seaborn
(For data visualization)

    pip install matplotlib seaborn


------
Natural Language Processing (NLP) Libraries

scikit-learn
(alternative for removing stopwords])

    pip install scikit-learn

---------------
=>(optional) 
  Save the installed packages to a requirements.txt file
    
    pip freeze > requirements.txt
    
    🐦It's a good practice for future reference! 
        
        ----------------
    🦄How to use this file in the future to set up the same environment (by chatGPT)
    1. Clone the Project:
    Clone the repository from GitHub (as you did earlier).
    2. Create and Activate a Virtual Environment:
    Create and activate a virtual environment in the project directory.
    3.Install the Dependencies:
    Use the requirements.txt file to install all the necessary packages:
    ----
    pip install -r requirements.txt
    ----
    This command installs all the packages listed in the requirements.txt file with the specified versions.
---------------


🦄to deactivate the virtual environment, just type in
    🎀-----------------------🎀
        deactivate
        or
        venv\Scripts\deactivate
    🎀-----------------------🎀



!!! Generally not advisable to share the env folder
=>In project directory, create a file named .gitignore.
        🦄On windows, can stay in virtual environment and type
        ------
        echo. > .gitignore
        ------
=>Open the .gitignore file in any text editor (e.g., Notepad, VS Code) and add the paths or patterns you want to ignore.
        In this case, just add 
        -----
        /venv
        -----
        inside the file (or /whatever_vertual_envirment_name )
        save the file



🍧🍧🍧🍧🍧🍧🍧
To start using Jupyter notebook

Because Jupyter Lab is installed in the venv, first be in the venv - should be a (venv) in start of line in cmd

=> Open the Jupyter Lab environment.
        Execute the command in cmd or windows powershell
    🎀-----------------------🎀
        jupyter-lab
    🎀-----------------------🎀 
        
        Should open up a browser window with the Jupyter Lab interface.


=> Creating a New Notebook
        Click on the + button in the file browser panel or the File menu at the top and selecting New > Notebook.
        Choose the Python kernel (e.g., Python 3) for your new notebook.

        🦄 If the [] befor the cell is [*], it means its still executing.

--------------------



=>Make Initial Commit(for GitHub):
    back to GitHub Desktop, check the changes made (e.g., the virtual environment folder, requirements.txt, etc.).
    Add a commit message like "Initial commit with project setup".
    🐦Click Commit to main.
=>Push the Changes to GitHub:
    After committing changes, 🐦click on "Push origin" in the top toolbar of GitHub Desktop to upload changes to GitHub.


    ============
🦄If the venv/ directory was previously tracked by Git (appeared in GitHub Desktop before), need to remove it from tracking manually:
    (can stay in virtual environment) Type the following line to Clear Cached Files
    git rm -r --cached venv/
    Then commit this change, and it should no longer appear. (can verify from github webpage)

🐦🐦🐦The virtual environment doesn't interfere with file operations like creating or editing files, so you can manage your project files without deactivating it.